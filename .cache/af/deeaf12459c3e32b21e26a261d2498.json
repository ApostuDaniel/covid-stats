{"id":"DUJ4","dependencies":[{"name":"E:\\WebProjects\\covid-vaccination-stats\\node_modules\\csvtojson\\v2\\ParseRuntime.js.map","includedInParent":true,"mtime":1629577339776},{"name":"E:\\WebProjects\\covid-vaccination-stats\\node_modules\\csvtojson\\src\\ParseRuntime.ts","includedInParent":true,"mtime":1629577339440},{"name":"E:\\WebProjects\\covid-vaccination-stats\\package.json","includedInParent":true,"mtime":1631039448036},{"name":"E:\\WebProjects\\covid-vaccination-stats\\node_modules\\csvtojson\\package.json","includedInParent":true,"mtime":1629577336736}],"generated":{"js":"\"use strict\";function e(e){var r=e.parseParam,o={needProcessIgnoreColumn:!1,needProcessIncludeColumn:!1,selectedColumns:void 0,ended:!1,hasError:!1,error:void 0,delimiter:e.parseParam.delimiter,eol:e.parseParam.eol,columnConv:[],headerType:[],headerTitle:[],headerFlag:[],headers:void 0,started:!1,parsedLineNumber:0,columnValueSetter:[]};return r.ignoreColumns&&(o.needProcessIgnoreColumn=!0),r.includeColumns&&(o.needProcessIncludeColumn=!0),o}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.initParseRuntime=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":0}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":13}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":22}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":33},"generated":{"line":1,"column":24}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":64,"column":8},"generated":{"line":1,"column":27}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":64,"column":8},"generated":{"line":1,"column":31}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":64,"column":17},"generated":{"line":1,"column":33}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":64,"column":27},"generated":{"line":1,"column":35}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":65,"column":8},"generated":{"line":1,"column":46}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":65,"column":28},"generated":{"line":1,"column":48}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":1,"column":49}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":66,"column":29},"generated":{"line":1,"column":74}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":67,"column":4},"generated":{"line":1,"column":76}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":67,"column":30},"generated":{"line":1,"column":102}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":68,"column":4},"generated":{"line":1,"column":104}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":68,"column":21},"generated":{"line":1,"column":125}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":69,"column":4},"generated":{"line":1,"column":127}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":69,"column":11},"generated":{"line":1,"column":134}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":70,"column":4},"generated":{"line":1,"column":136}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":70,"column":14},"generated":{"line":1,"column":146}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":1,"column":148}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":71,"column":11},"generated":{"line":1,"column":159}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":1,"column":161}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":72,"column":15},"generated":{"line":1,"column":171}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":72,"column":25},"generated":{"line":1,"column":173}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":72,"column":36},"generated":{"line":1,"column":184}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":73,"column":4},"generated":{"line":1,"column":194}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":198}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":73,"column":19},"generated":{"line":1,"column":200}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":73,"column":30},"generated":{"line":1,"column":211}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":74,"column":4},"generated":{"line":1,"column":215}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":74,"column":16},"generated":{"line":1,"column":226}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":75,"column":4},"generated":{"line":1,"column":229}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":75,"column":16},"generated":{"line":1,"column":240}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":76,"column":4},"generated":{"line":1,"column":243}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":76,"column":17},"generated":{"line":1,"column":255}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":1,"column":258}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":77,"column":16},"generated":{"line":1,"column":269}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":78,"column":4},"generated":{"line":1,"column":272}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":78,"column":13},"generated":{"line":1,"column":285}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":79,"column":4},"generated":{"line":1,"column":287}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":79,"column":13},"generated":{"line":1,"column":296}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":1,"column":298}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":80,"column":22},"generated":{"line":1,"column":315}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":1,"column":317}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":81,"column":23},"generated":{"line":1,"column":335}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":89,"column":9},"generated":{"line":1,"column":339}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":1,"column":346}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":1,"column":348}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":84,"column":4},"generated":{"line":1,"column":364}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":84,"column":8},"generated":{"line":1,"column":366}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":84,"column":34},"generated":{"line":1,"column":391}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":1,"column":394}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":86,"column":13},"generated":{"line":1,"column":396}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":87,"column":4},"generated":{"line":1,"column":413}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":87,"column":8},"generated":{"line":1,"column":415}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":87,"column":35},"generated":{"line":1,"column":441}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":89,"column":9},"generated":{"line":1,"column":444}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":446}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":453}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":468}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":476}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":489}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":490}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":497}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":501}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":509}},{"source":"../src/ParseRuntime.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":1,"column":526}}],"sources":{"../src/ParseRuntime.ts":"import { CSVParseParam, CellParser } from \"./Parameters\";\nimport { Converter, PreRawDataCallback, PreFileLineCallback } from \"./Converter\";\nimport { ChildProcess } from \"child_process\";\nimport CSVError from \"./CSVError\";\n\nexport interface ParseRuntime {\n  /**\n   * If need convert ignoreColumn from column name(string) to column index (number). Parser needs column index.\n   */\n  needProcessIgnoreColumn: boolean;\n  /**\n   * If need convert includeColumn from column name(string) to column index (number). Parser needs column index.\n   */\n  needProcessIncludeColumn: boolean;\n  /**\n   * the indexes of columns to reserve, undefined means reserve all, [] means hide all\n   */\n  selectedColumns?: number[];\n  ended: boolean;\n  hasError: boolean;\n  error?: Error;\n  /**\n   * Inferred delimiter\n   */\n  delimiter: string | string[];\n  /**\n   * Inferred eol\n   */\n  eol?: string;\n  /**\n   * Converter function for a column. Populated at runtime.\n   */\n  columnConv: (CellParser | null)[],\n  headerType: any[],\n  headerTitle: string[],\n  headerFlag: any[],\n  /**\n   * Inferred headers\n   */\n  headers?: any[],\n  csvLineBuffer?: Buffer,\n  \n  /**\n   * after first chunk of data being processed and emitted, started will become true.\n   */\n  started: boolean,\n  preRawDataHook?: PreRawDataCallback,\n  preFileLineHook?: PreFileLineCallback,\n  parsedLineNumber: number,\n\n  columnValueSetter: Function[];\n  subscribe?: {\n    onNext?: (data: any, lineNumber:number) => void | PromiseLike<void>;\n    onError?: (err: CSVError) => void;\n    onCompleted?: () => void;\n  };\n  then?: {\n    onfulfilled: (value: any[]) => any;\n    onrejected: (err: Error) => any;\n  }\n\n}\nexport function initParseRuntime(converter: Converter): ParseRuntime {\n  const params = converter.parseParam;\n  const rtn: ParseRuntime = {\n    needProcessIgnoreColumn: false,\n    needProcessIncludeColumn: false,\n    selectedColumns: undefined,\n    ended: false,\n    hasError: false,\n    error: undefined,\n    delimiter: converter.parseParam.delimiter,\n    eol: converter.parseParam.eol,\n    columnConv: [],\n    headerType: [],\n    headerTitle: [],\n    headerFlag: [],\n    headers: undefined,\n    started: false,\n    parsedLineNumber: 0,\n    columnValueSetter: [],\n  }\n  if (params.ignoreColumns) {\n    rtn.needProcessIgnoreColumn = true;\n  }\n  if (params.includeColumns) {\n    rtn.needProcessIncludeColumn = true;\n  }\n  return rtn;\n}"},"lineCount":null}},"error":null,"hash":"4ff8cf2b8aa160430057bf32a9487cae","cacheData":{"env":{}}}